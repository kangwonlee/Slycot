# Travis configuration file for slycot
language: shell


env:
  - CONDA_PYTHON=2.7 TEST_CONDA=0
  - CONDA_PYTHON=2.7 TEST_CONDA=1
  - CONDA_PYTHON=3.5 TEST_CONDA=0
  - CONDA_PYTHON=3.5 TEST_CONDA=1
  - CONDA_PYTHON=3.6 TEST_CONDA=0
  - CONDA_PYTHON=3.6 TEST_CONDA=1


os:
  - linux
  - osx


cache:
  pip: true
  brew: true
  directories:
    - $HOME/.cache/pip


# Install display manager to allow testing of plotting functions

#
# Install fortran compiler, if not using Conda's
# If not using conda, then install liblapack here (conda version
# will handle this through the build recipe)
#
addons:
  apt:
    packages:
      - xvfb
      - gfortran
      - liblapack-dev
      - libblas-dev
  brew:
    packages:
      - xvfb
      - gfortran
      - liblapack-dev
      - libblas-dev


before_install:
  # Miniconda version
  - if [[ "$CONDA_PYTHON" == "2.7" ]]; then
      export VER_MINICONDA="2";
    else
      export VER_MINICONDA="3";
    fi
  # Miniconda OS
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      export OS_MINICONDA="Linux";
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export OS_MINICONDA="MacOSX";
    fi
  # start display manager to allow testing of plotting functions
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      export DISPLAY=:99.0;
      sh -e /etc/init.d/xvfb start;
    elif  [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export MPLBACKEND="TkAgg";
      ( sudo Xvfb :99 -ac -screen 0 1024x768x8; echo ok; ) &
    fi;
install:
  #
  # Install miniconda to allow quicker installation of dependencies
  # See https://conda.io/docs/user-guide/tasks/use-conda-with-travis-ci.html
  #
  - wget http://repo.continuum.io/miniconda/Miniconda${VER_MINICONDA}-latest-${OS_MINICONDA}-x86_64.sh -O miniconda.sh;
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - if [[ $TEST_CONDA == 1 ]]; then conda install conda-build; fi
  - conda info -a
  #
  # Set up a test environment for testing everything out
  - conda create -q -n test-environment python="$CONDA_PYTHON" pip coverage nose numpy
  - source activate test-environment
  #
  # Make sure that fortran compiler can find conda libraries
  #
  - export LIBRARY_PATH="$HOME/miniconda/envs/test-environment/lib";
  #
  # Install the slycot package (two ways, to improve robustness).  For the 
  # conda version, need to install lapack from conda-forge (no way to specify 
  # this in the recipe).
  # add the conda-forge channel to the config, otherwise openblas or
  # lapack cannot be found in the check
  # with --override-channels to make sure the locally built slycot is installed
  #
  - if [[ $TEST_CONDA == 1 ]]; then
      conda config --append channels conda-forge;
      conda build --python "$CONDA_PYTHON" conda-recipe;
      conda install -c conda-forge lapack;
      conda install --override-channels -c local slycot;
    else
      LAPACKLIBS=lapack:blas python setup.py install;
    fi
  #
  # coveralls not in conda repos :-(
  - pip install coveralls

script:
  # Local unit tests
  # TODO: replace with nose?
  - python runtests.py --coverage
  #
  # As a deeper set of tests, get test against python-control as well
  #
  # Additional packages required for python-control
  - conda install scipy matplotlib
  # Get python-control from source and install
  - git clone https://github.com/python-control/python-control.git control
  - cd control; python setup.py test

after_success:
  - coveralls
